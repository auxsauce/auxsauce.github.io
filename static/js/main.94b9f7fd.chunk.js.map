{"version":3,"sources":["components/main/Progress.jsx","components/display/ProjectIntro.jsx","components/display/ProjectPreview.jsx","components/display/ProjectDescription.jsx","components/projects/Diffuse.jsx","components/projects/BikeStar.jsx","components/projects/Cofi.jsx","components/main/Main.jsx","components/main/Nav.jsx","components/main/Body.jsx","App.js","serviceWorker.js","index.js"],"names":["Progress","useState","scrollProgress","setScrollProgress","activeProgress","setActiveProgress","mouseIsDown","setMouseIsDown","window","onscroll","e","scrollMax","srcElement","scrollingElement","scrollHeight","clientHeight","scrollPct","scrollTop","scrollProgressStyle","top","height","className","onMouseDown","console","log","onMouseMove","pageHeight","clientY","elementHeight","currentTarget","offsetHeight","yCoordPct","getBoundingClientRect","document","body","innerHeight","scrollY","scrollTo","clickScrollProgress","onMouseUp","onMouseLeave","style","ProjectIntro","ProjectPreview","imgURL","src","alt","ProjectDescription","projectObj","name","Diffuse","BikeStar","Cofi","Main","location","pathname","documentElement","useEffect","onScroll","Nav","Body","App","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKAEe,SAASA,IAAU,MAIcC,mBAAS,GAJvB,mBAIvBC,EAJuB,KAIPC,EAJO,OAKcF,oBAAS,GALvB,mBAKvBG,EALuB,KAKPC,EALO,OAMQJ,oBAAS,GANjB,mBAMvBK,EANuB,KAMVC,EANU,KA+B9BC,OAAOC,SAtBsB,SAACC,GAC1B,IAAIC,EAAYD,EAAEE,WAAWC,iBAAiBC,aAAeJ,EAAEE,WAAWC,iBAAiBE,aAEvFC,EADgBN,EAAEE,WAAWC,iBAAiBI,UAClBN,EAC5BK,GAAa,GAAKA,GAAa,GAC/Bb,GAAkB,WAAO,OAAOa,MAkBxC,IAAME,EAAsB,CACxBC,IAAK,EACLC,OAAO,GAAD,OAAsB,IAAjBlB,EAAL,MAEV,OACI,yBAAKmB,UAAU,oBACXC,YAAa,WAAOf,GAAe,kBAAM,KAAOF,GAAkB,kBAAM,KAAOkB,QAAQC,IAAI,cAC3FC,YAAa,SAACf,GAAON,GAtBD,SAACM,GACzB,IAAIgB,EAAahB,EAAEiB,QACfC,EAAgBlB,EAAEmB,cAAcC,aAGhCC,GAAaL,EAFDhB,EAAEmB,cAAcG,wBAAwBb,KAEbS,EAGvCjB,EAAYsB,SAASC,KAAKpB,aAAeN,OAAO2B,YAChC3B,OAAO4B,QAE3B5B,OAAO6B,SAAS,EAAGN,EAAYpB,GAWY2B,CAAoB5B,IAC3D6B,UAAW,WAAOhC,GAAe,kBAAM,KAAQF,GAAkB,kBAAM,KAAQkB,QAAQC,IAAI,gBAC3FgB,aAAc,WAAYlC,IAAcD,GAAkB,kBAAO,KAAQkB,QAAQC,IAAI,kBAErF,yBAAKH,UAAU,oBAAoBoB,MAAOvB,IAC1C,+BCzCG,SAASwB,IACpB,OACI,yBAAKrB,UAAU,iBCFR,SAASsB,EAAT,GAAkC,IAATC,EAAQ,EAARA,OACpC,OACI,yBAAKvB,UAAU,kBACX,yBAAKwB,IAAKD,EAAQE,IAAI,MCHnB,SAASC,EAAT,GAAyC,EAAZC,WAEjCC,KAEP,OACI,yBAAK5B,UAAU,sBAAf,QCFO,SAAS6B,IACpB,OACI,yBAAK7B,UAAU,WACX,kBAACqB,EAAD,MACA,kBAACC,EAAD,MACA,kBAACI,EAAD,OCLG,SAASI,IACpB,OACI,yBAAK9B,UAAU,YACX,kBAACqB,EAAD,MACA,kBAACC,EAAD,MACA,kBAACI,EAAD,OCLG,SAASK,IACpB,OACI,yBAAK/B,UAAU,QACX,kBAACqB,EAAD,MACA,kBAACC,EAAD,MACA,kBAACI,EAAD,OCNG,SAASM,IACpB9B,QAAQC,IAAIS,SAASqB,SAASC,UAEvBtB,SAASC,KACTD,SAASuB,gBAahB,OALAC,qBAAU,WAENlC,QAAQC,IAAI,UACb,IAGC,yBAAKH,UAAU,OAAOqC,SAAU,SAAChD,MAC7B,kBAACV,EAAD,MACA,kBAACkD,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,OC3BG,SAASO,IACpB,OACI,yBAAKtC,UAAU,OACX,yBAAKA,UAAU,WAAf,WACA,yBAAKA,UAAU,SAAf,UCAG,SAASuC,IACpB,OACI,yBAAKvC,UAAU,QACX,kBAACsC,EAAD,MACA,kBAACN,EAAD,O,KCEGQ,MARf,WACI,OACI,yBAAKxC,UAAU,OACX,kBAACuC,EAAD,QCKQE,QACW,cAA7BtD,OAAO8C,SAASS,UAEe,UAA7BvD,OAAO8C,SAASS,UAEhBvD,OAAO8C,SAASS,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjC,SAASkC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.94b9f7fd.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nexport default function Progress(){\n    // destructuring\n\n    // state\n    const [scrollProgress, setScrollProgress] = useState(0);\n    const [activeProgress, setActiveProgress] = useState(false);\n    const [mouseIsDown, setMouseIsDown] = useState(false);\n\n    // util\n    const updateScrollProgress = (e) => {\n        let scrollMax = e.srcElement.scrollingElement.scrollHeight - e.srcElement.scrollingElement.clientHeight;\n        let scrollCurrent = e.srcElement.scrollingElement.scrollTop;\n        let scrollPct = scrollCurrent / scrollMax;\n        if (scrollPct <= 1 && scrollPct >= 0) {\n            setScrollProgress(() => {return scrollPct})\n        }\n    }\n    const clickScrollProgress = (e) => {\n        let pageHeight = e.clientY\n        let elementHeight = e.currentTarget.offsetHeight;\n        let offsetTop = e.currentTarget.getBoundingClientRect().top;\n\n        let yCoordPct = (pageHeight - offsetTop) / elementHeight;\n\n        // let scrollMax = document.body.scrollHeight - window.outerHeight;\n        let scrollMax = document.body.scrollHeight - window.innerHeight;\n        let scrollCurrent = window.scrollY;\n        // let scrollPct = scrollCurrent / scrollMax;\n        window.scrollTo(0, yCoordPct * scrollMax)\n    }\n\n    window.onscroll = updateScrollProgress\n    const scrollProgressStyle = {\n        top: 0,\n        height: `${scrollProgress * 100}%`,\n    }\n    return(\n        <div className=\"Progress noselect\" \n            onMouseDown={() => {setMouseIsDown(() => true); setActiveProgress(() => true); console.log('activated')}}\n            onMouseMove={(e) => {activeProgress && clickScrollProgress(e)}}\n            onMouseUp={() => {setMouseIsDown(() => false); setActiveProgress(() => false); console.log('deactivated')}}\n            onMouseLeave={() => {if (!mouseIsDown) {setActiveProgress(() =>  false); console.log('deactivated')}}}\n            >\n            <div className='prog-amt noselect' style={scrollProgressStyle} ></div>\n            <div>\n            </div>\n        </div>\n    )\n}","// App.js > Body.js > Main.js > _project-name_.js > ProjectIntro.js\n\n// react\nimport React from 'react';\n\nexport default function ProjectIntro(){\n    return(\n        <div className=\"ProjectIntro\">\n            \n        </div>\n    )\n}","// App.js > Body.js > Main.js > _project-name_.js > ProjectPreview.js\n\n// react\nimport React from 'react';\n\nexport default function ProjectPreview({imgURL}){\n    return(\n        <div className=\"ProjectPreview\">\n            <img src={imgURL} alt='' />\n        </div>\n    )\n}","// App.js > Body.js > Main.js > _project-name_.js > ProjectDescription.js\n\n// react\nimport React from 'react';\n\nexport default function ProjectDescription({projectObj}){\n    // destructuring\n    const {name, } = projectObj;\n\n    return(\n        <div className=\"ProjectDescription\">\n            div.\n        </div>\n    )\n}","// react\nimport React from 'react';\n\n// projects\nimport ProjectIntro       from '../display/ProjectIntro';\nimport ProjectPreview     from '../display/ProjectPreview';\nimport ProjectDescription from '../display/ProjectDescription';\n\nexport default function Diffuse(){\n    return(\n        <div className=\"Diffuse\">\n            <ProjectIntro />\n            <ProjectPreview />\n            <ProjectDescription />\n        </div>\n    )\n}","// react\nimport React from 'react';\n\n// projects\nimport ProjectIntro       from '../display/ProjectIntro';\nimport ProjectPreview     from '../display/ProjectPreview';\nimport ProjectDescription from '../display/ProjectDescription';\n\nexport default function BikeStar(){\n    return(\n        <div className=\"BikeStar\">\n            <ProjectIntro />\n            <ProjectPreview />\n            <ProjectDescription />\n        </div>\n    )\n}","// react\nimport React from 'react';\n\n// projects\nimport ProjectIntro       from '../display/ProjectIntro';\nimport ProjectPreview     from '../display/ProjectPreview';\nimport ProjectDescription from '../display/ProjectDescription';\n\nexport default function Cofi(){\n    return(\n        <div className=\"Cofi\">\n            <ProjectIntro />\n            <ProjectPreview />\n            <ProjectDescription />\n        </div>\n    )\n}","import React, {useEffect} from 'react';\n\nimport Progress from './Progress';\nimport Diffuse from '../projects/Diffuse';\nimport BikeStar from '../projects/BikeStar';\nimport Cofi from '../projects/Cofi';\n\nexport default function Main(){\n    console.log(document.location.pathname)\n    let scrollObj = {\n        b: document.body,\n        h: document.documentElement\n    }\n\n    // const onScrollUpdate = () => {\n    //     document.addEventListener('scroll')\n    //     console.log()\n    //     return \n    // }\n    useEffect(() => {\n        // onScrollUpdate()\n        console.log('here')\n    }, [])\n    \n    return(\n        <div className=\"Main\" onScroll={(e) => {}} >\n            <Progress />\n            <Diffuse />\n            <BikeStar />\n            <Cofi />\n        </div>\n    )\n}","import React from 'react';\n\nexport default function Nav(){\n    return(\n        <div className=\"Nav\">\n            <div className=\"contact\">Contact</div>\n            <div className=\"about\">About</div>\n        </div>\n    )\n}","import React from 'react';\n\n// components\nimport Main from './Main';\nimport Nav from './Nav';\n\nexport default function Body(){\n    return(\n        <div className=\"Body\">\n            <Nav />\n            <Main />\n        </div>\n    )\n}","import React from 'react';\nimport Body from './components/main/Body';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Body />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}